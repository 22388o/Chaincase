@inherits LayoutComponentBase 
@using Chaincase.UI.Services
@implements IDisposable
@inject UIStateService StateService
@inject StackService StackService
@inject NavigationManager NavigationManager
@inject ThemeSwitcher ThemeSwitcher

<IonSplitPane when="sm" content-id="main-content" disabled="@StackService.AnyStackState">
    <IonPage class="ion-page" id="main-content">
        <IonTabs>
            <IonTab>
                @Body
            </IonTab>

            <IonTabBar slot="bottom">
                <IonTabButton class="@(IsOnMenu ? "tab-bar-background-open" : "")" @onclick='() => StackPush("/")'>
                    <IonIcon name="home"></IonIcon>
                    <IonLabel>HOME</IonLabel>
                </IonTabButton>
                <IonTabButton @onclick='() => StackPush("/coinjoin")'>
                    <IonIcon name="shuffle"></IonIcon>
                    <IonLabel>COINJOIN</IonLabel>
                </IonTabButton>
                <IonTabButton @onclick='() => StackPush("/walletinfo")'>
                    <IonIcon name="cog"></IonIcon>
                    <IonLabel>SETTINGS</IonLabel>
                </IonTabButton>
            </IonTabBar>
        </IonTabs>
    </IonPage>
</IonSplitPane>

@code{

    private bool IsOnMenu = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StateService.StateChanged += OnStateServiceOnStateChanged;
        StackService.StackStateChanged += OnStateServiceOnStateChanged;
        OnStateServiceOnStateChanged();
        StateService.ThemeChanged += StateServiceOnThemeChanged;
        StateService.SetSystemTheme();
    }

    private void StateServiceOnThemeChanged()
    {
        _ = ThemeSwitcher.ToggleDark(StateService.DarkMode);
    }

    private void OnStateServiceOnStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void StackPush(string uri)
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/overview");
        });
        NavigationManager.NavigateTo(uri);
    }

    public void Dispose()
    {
        StateService.StateChanged -= OnStateServiceOnStateChanged;
        StateService.ThemeChanged -= StateServiceOnThemeChanged;
        StackService.StackStateChanged -= OnStateServiceOnStateChanged;
    }
}
