@inject StatusViewModel StatusViewModel

@inherits ReactiveComponentBase<StatusViewModel>

<ion-list>
    <ion-item>
        <ion-label>Numbers of Peers: @ViewModel.Peers</ion-label>
    </ion-item>
    <ion-item>
        <ion-label>Backend Status: @Backendlabel()</ion-label>
    </ion-item>
    <ion-item>
        <ion-label>Tor Status: @TorLabel()</ion-label>
    </ion-item>
    <ion-item>
        @if (ViewModel.FiltersLeft == 0)
        {
            <ion-label>Your wallet is sync'd</ion-label>
        }
        else
        {
            <ion-label>Filters left: @ViewModel.FiltersLeft</ion-label>
        }
    </ion-item>
    @if (ViewModel.ProgressPercent != 100)
    {
        <ion-item>
            <ion-progress-bar value="@ViewModel.ProgressPercent"/>
        </ion-item>
    }

</ion-list>

@code{

    protected override void OnInitialized()
    {
        ViewModel = StatusViewModel;
    }

    public string Backendlabel() {
        switch (ViewModel.Backend) {
            case WalletWasabi.Models.BackendStatus.NotConnected:
                return "⌛";
            case WalletWasabi.Models.BackendStatus.Connected:
                return "✅";
            default:
                return "⌛";
        }
    }

    public string TorLabel() {
        switch (ViewModel.Tor)
        {
            case WalletWasabi.Models.TorStatus.NotRunning:
                return "⌛";
            case WalletWasabi.Models.TorStatus.Running:
                return "✅";
            case WalletWasabi.Models.TorStatus.TurnedOff:
                return "📴";
            default:
                return "⌛";
        }
    }
}
