@inject StatusViewModel StatusViewModel
@using WalletWasabi.Models

@inherits ReactiveComponentBase<StatusViewModel>

<IonList>
    @if (ViewModel.Tor == TorStatus.NotRunning)
    {
        <IonItem>
            <IonLabel>Making private Tor connection...</IonLabel> <ion-spinner slot="end" />
        </IonItem>
    }
    else if (ViewModel.Backend == BackendStatus.NotConnected)
    {
        <IonItem>
            <IonLabel>Connecting to Chaincase...</IonLabel> <ion-spinner slot="end" />
        </IonItem>
    }
    else if (ViewModel.FiltersLeft > 0)
    {
        <IonItem>
            <IonLabel>Fetching @ViewModel.FiltersLeft private sync filters...</IonLabel> <ion-spinner slot="end" />
        </IonItem>
    }
    else if (ViewModel.Peers <= 0)
    {
        <IonItem>
            <IonLabel>Finding bitcoin peers...</IonLabel> <ion-spinner slot="end" />
        </IonItem>
    }
</IonList>

@code{

    protected override void OnInitialized()
    {
        ViewModel = StatusViewModel;
    }

    private bool IsSynchronized => ViewModel.FiltersLeft == 0
        && ViewModel.Backend == BackendStatus.Connected
        && ViewModel.Tor != TorStatus.NotRunning;

    public string Backendlabel()
    {
        switch (ViewModel.Backend)
        {
            case WalletWasabi.Models.BackendStatus.NotConnected:
                return "⌛";
            case WalletWasabi.Models.BackendStatus.Connected:
                return "✅";
            default:
                return "⌛";
        }
    }

    public string TorLabel()
    {
        switch (ViewModel.Tor)
        {
            case WalletWasabi.Models.TorStatus.NotRunning:
                return "⌛";
            case WalletWasabi.Models.TorStatus.Running:
                return "✅";
            case WalletWasabi.Models.TorStatus.TurnedOff:
                return "📴";
            default:
                return "⌛";
        }
    }
}
