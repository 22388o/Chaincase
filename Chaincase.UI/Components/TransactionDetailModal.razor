@using Chaincase.Common.Contracts
@inject IClipboard Clipboard
@inherits ReactiveComponentBase<TransactionViewModel>

<IonModal @bind-Visible="Visible">
    <IonHeader>
        <IonToolbar>
            <IonTitle>Transaction Details</IonTitle>
            <IonButtons slot="start">
                <IonButton @onclick="CloseModal">Back</IonButton>
            </IonButtons>
        </IonToolbar>
    </IonHeader>

    <IonContent>
        @if (ViewModel is not null)
        {
            <IonList>
                <IonItem>
                    <IonLabel>@ViewModel.AmountBtc BTC</IonLabel>
                </IonItem>
                <IonItem OnClick="@(async () => await CopyToClipboardAsync(ViewModel.TransactionId))">
                    <IonLabel>
                        <h3>Transaction ID:</h3>
                        <p>@ViewModel.TransactionId</p>
                    </IonLabel>
                </IonItem>
                <IonItem>
                    <IonLabel>
                        <h3>Date:</h3>
                        <p>@ViewModel.DateString</p>
                    </IonLabel>
                </IonItem>
                <IonItem>
                    <IonLabel>
                        <h3>Block Height:</h3>
                        <p>@ViewModel.BlockHeight</p>
                    </IonLabel>
                </IonItem>
                <IonItem>
                    <IonLabel>
                        <h3>Confirmed:</h3>
                        <p>@ViewModel.Confirmed</p>
                    </IonLabel>
                </IonItem>
                <IonItem>
                    <IonLabel>
                        <h3>Confirmations:</h3>
                        <p>@ViewModel.Confirmations</p>
                    </IonLabel>
                </IonItem>
            </IonList>
        }

        <ClipboardToast @bind-Visible="@IsToastVisible" />
    </IonContent>
</IonModal>


@code {
    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public TransactionViewModel TransactionViewModel
    {
        get { return ViewModel; }
        set { ViewModel = value; }
    }

    [Parameter]
    public EventCallback<CoinViewModel> CoinViewModelChanged { get; set; }

    private bool IsToastVisible;

    private async Task CloseModal()
    {
        bool visible = false;
        await VisibleChanged.InvokeAsync(visible);
    }

    private async Task CopyToClipboardAsync(string toCopy)
    {
        await Clipboard.Copy(toCopy);
        IsToastVisible = true;
    }

}
