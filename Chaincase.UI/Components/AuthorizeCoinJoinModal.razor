@using Chaincase.UI.Services

@inject CoinJoinViewModel CoinJoinViewModel
@inherits ReactiveComponentBase<CoinJoinViewModel>

<IonModal @bind-Visible="Visible">
    <IonHeader>
        <IonToolbar>
            <IonTitle>Authorize CoinJoin</IonTitle>
            <IonButtons slot="start">
                <IonButton @onclick="CloseModal">Back</IonButton>
            </IonButtons>
        </IonToolbar>
    </IonHeader>

    <IonContent>
        <IonContent>
            <IonCard color="light">
                <IonCardContent>
                    <IonText color="primary">
                        <p>
                            <strong>@SelectedCoinsCount @(SelectedCoinsCount == 1 ? "coin" : "coins") to CoinJoin</strong>
                            <span class="ion-float-end">@ViewModel.CoinList.SelectedAmount BTC</span>
                        </p>
                    </IonText>
                </IonCardContent>
            </IonCard>
            <IonLabel position="stacked" class="ion-padding">Enter Password</IonLabel>
            <IonItem>
                <IonPasswordInput @bind-Value="Password" />
            </IonItem>
            <div class="ion-padding">
                <IonButton OnClick="@CoinJoin" color="primary" class="neu-button">COINJOIN NOW</IonButton>
            </div>
            <IonLoading @bind-Visible="@ViewModel.IsEnqueueBusy" message="Preparing to CoinJoin..." />
            <IonToast @bind-Visible="@IsToastVisible" color="@ToastColor" message="@ToastMessage" duration="@ToastDuration" />
        </IonContent>
    </IonContent>
</IonModal>


@code {
    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public Action Authorized { get; set; }

    private bool IsToastVisible;
    private string ToastMessage = "";
    private const int ToastDuration = 2000; // ms
    private string ToastColor;

    private string Password = "";
    private bool IsShaking { get; set; }

    private int SelectedCoinsCount => ViewModel.CoinList?.CoinList.Where(x => x.IsSelected).Count() ?? 0;


    protected override void OnInitialized()
    {
        ViewModel = CoinJoinViewModel;
    }

    private async Task CoinJoin()
    {
        try
        {
            await ViewModel.DoEnqueueAsync(Password);
            Password = "";
            Visible = false;
            ToastMessage = "Success! Queued to join.";
            ToastColor = "success";
            IsToastVisible = true;
            Authorized?.Invoke();
        }
        catch (Exception ex)
        {
            ToastMessage = ex.Message;
            ToastColor = "danger";
            IsToastVisible = true;
        }
    }

    private async Task CloseModal()
    {
        bool visible = false;
        await VisibleChanged.InvokeAsync(visible);
    }
}
