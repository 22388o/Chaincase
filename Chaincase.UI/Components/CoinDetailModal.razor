@using Chaincase.Common.Contracts
@using Chaincase.Common
@inject IClipboard Clipboard
@inherits ReactiveComponentBase<CoinViewModel>

<IonModal @bind-Visible="Visible">
    <IonHeader>
        <IonToolbar>
            <IonTitle>Coin Details</IonTitle>
            <IonButtons slot="start">
                <IonButton @onclick="CloseModal">Back</IonButton>
            </IonButtons>
        </IonToolbar>
    </IonHeader>

    <IonContent>


        @if (ViewModel is not null)
        {
            <IonList>
                <IonItem>
                    <IonLabel>@ViewModel.AmountBtc BTC</IonLabel>
                </IonItem>
                <IonItem OnClick="@(async () => await CopyToClipboardAsync(ViewModel.TransactionId))">
                    <IonLabel>
                        <h3>Transaction ID</h3>
                        <p>@ViewModel.TransactionId</p>
                    </IonLabel>
                </IonItem>
                <IonItem>
                    <IonLabel>
                        <h3>Output Index</h3>
                        <p>@ViewModel.OutputIndex</p>
                    </IonLabel>
                </IonItem>
                <IonItem>
                    <IonLabel>
                        <h3>Confirmations</h3>
                        <p>@ViewModel.Confirmations</p>
                    </IonLabel>
                </IonItem>
                <IonItem>
                    <IonLabel>
                        <h3>Anonymity Set</h3>
                        <IonText color="@(ViewModel.AnonymitySet > Config.DefaultPrivacyLevelSome ? "success" : "warning")">
                            <p>@ViewModel.AnonymitySet</p>
                        </IonText>
                    </IonLabel>
                </IonItem>
                <IonItem>
                    <IonLabel>
                        <h3>Contact labels</h3>
                        <p>@ViewModel.Clusters</p>
                    </IonLabel>
                </IonItem>
            </IonList>

            <IonCard color="primary">
                <IonCardContent>
                    <strong>Info:</strong>
                    Contact labels stay with a coin until it becomes indistinguishable from a threshold
                    number of other coins from that contact's point of view. We call this number "anonymity set." It's a measure of your privacy.
                </IonCardContent>
            </IonCard>
        }

        <ClipboardToast @bind-Visible="@IsToastVisible" />
    </IonContent>
</IonModal>


@code {
    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public CoinViewModel CoinViewModel
    {
        get { return ViewModel; }
        set { ViewModel = value; }
    }

    [Parameter]
    public EventCallback<CoinViewModel> CoinViewModelChanged { get; set; }

    private bool IsToastVisible;

    private async Task CloseModal()
    {
        bool visible = false;
        await VisibleChanged.InvokeAsync(visible);
    }

    private async Task CopyToClipboardAsync(string toCopy)
    {
        await Clipboard.Copy(toCopy);
        IsToastVisible = true;
    }
}
