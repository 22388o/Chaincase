@page "/send/approve"
@using Chaincase.UI.Services;
@using System.Reactive.Threading.Tasks;

@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject StackService StackService 
@inject SendViewModel SendViewModel
@inherits ReactiveComponentBase<SendViewModel>

<IonContent class="ion-padding">
    <IonText>@ViewModel.AmountText</IonText>
    <IonText>To @ViewModel.DestinationString</IonText>
    <IonLabel position="stacked">Enter Password</IonLabel>
    <div class="@(IsShaking ? "shake" : "")">
        <IonItem>
            <IonPasswordInput @bind-Value="Password" placeholder="e.g. margaretthatcheris110%SEXY" />
        </IonItem>
    </div>
    <IonButton @onclick="ClickSendNow" expand="block">SEND NOW</IonButton>
    <IonLoading Visible="@ViewModel.IsBusy"></IonLoading>

</IonContent>

@code {
    private string Password { get; set; }
    private bool IsShaking { get; set; }


    protected override void OnInitialized()
    {
        ViewModel = SendViewModel;
        UiStateService.Title = "SEND";
    }

    private async Task ClickSendNow()
    {
        IsShaking = false;
        var isSent = await ViewModel.SendTransactionCommand.Execute(Password).ToTask();
        if (isSent)
        {
            // TODO clear stack service
            NavigationManager.NavigateTo("/send/sent");
        } else
        {
            IsShaking = true;
        }
    }
}
