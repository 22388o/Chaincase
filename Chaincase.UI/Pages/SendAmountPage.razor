@page "/send/amount"
@using Chaincase.UI.Services
@inject SendViewModel SendViewModel
@inject StackService StackService
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inherits ReactiveComponentBase<SendViewModel>

<IonContent>
    <IonItem>
        <IonLabel>Amount</IonLabel>
        <IonInput @bind-Value="ViewModel.AmountText" inputmode="decimal" type="text" slot="end" class="ion-text-end" />
    </IonItem>
    <IonItem>
        <IonLabel>Automatic Coin Selection</IonLabel>
        <IonToggle color="primary" @bind-Value="IsCoinSelectionAutomatic" />
    </IonItem>
    @if (ViewModel.SelectCoinsViewModel.SelectedAmount < ViewModel.OutputAmount + ViewModel.EstimatedBtcFee)
    {
        <IonCard color="primary">
            <IonCardContent>
                <strong>INFO</strong>: Please select enough bitcoin to match the amount
            </IonCardContent>
        </IonCard>
    }
    else if (ViewModel.SelectCoinsViewModel.WarnCertainLink)
    {
        <IonCard color="warning">
            <IonCardContent>
                <strong>WARNING</strong>: The coins you selected have not been protected with CoinJoin.
                The contacts associated with the coins and the recipient of this transaction have the capability to
                identify historical transaction data associated with these coins.
            </IonCardContent>
        </IonCard>

    }
    else
    {
        <IonCard color="success">
            <IonCardContent>
                Selected coins show low risk of privacy loss 🗽
            </IonCardContent>
        </IonCard>
    }
    <IonItem button="@(!IsCoinSelectionAutomatic)" disabled="@(IsCoinSelectionAutomatic)" @onclick="NavigateToSelectCoinsPage">
        <IonLabel>Amount Selected</IonLabel>
        <IonChip color="primary">
            ₿ @ViewModel.SelectCoinsViewModel.SelectedAmount
        </IonChip>
    </IonItem>
    <IonItem>
        <IonLabel>Send Max</IonLabel>
        <IonToggle color="primary" @bind-Value="ViewModel.IsMax" />
    </IonItem>
    <IonItem>
        <IonLabel>Fee</IonLabel>
        <IonChip color="primary" @onclick="ToggleSelectFeeModal">@ViewModel.FeeRate</IonChip>
    </IonItem>
    <div class="ion-padding">
        <IonButton class="neu-button"
                   OnClick="NavigateToSendApprovalPage" expand="block" color="primary"
                   disabled="@(!ViewModel.IsTransactionOkToSign)">CONFIRM SEND</IonButton>
    </div>
</IonContent>

<FeeModal @bind-Visible="@IsFeeModalVisible"
          SendViewModel="@ViewModel" />

@code {

    private bool IsSelectCoinsModalVisible;
    private bool IsFeeModalVisible;
    private bool _isCoinSelectionAutomatic;
    public bool IsCoinSelectionAutomatic
    {
        get => _isCoinSelectionAutomatic;
        set
        {
            if (value)
            {
                ViewModel.SelectCoinsViewModel.SelectPrivateCoins();
            }
            _isCoinSelectionAutomatic = value;
        }
    }

    private double amount { get; set; }

    protected override void OnInitialized()
    {
        ViewModel = SendViewModel;
        UiStateService.Title = "SEND";
    }

    private void ToggleSelectFeeModal() =>
        IsFeeModalVisible = !IsFeeModalVisible;

    private void NavigateToSelectCoinsPage()
    {
        if (IsCoinSelectionAutomatic)
            return;
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/send/amount");
        });
        NavigationManager.NavigateTo("/selectcoins");
    }

    private void NavigateToSendApprovalPage()
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/send/amount");
        });
        NavigationManager.NavigateTo("/send/approve");
    }
}
