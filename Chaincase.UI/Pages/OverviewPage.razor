@layout TabLayout
@page "/overview"
@using Chaincase.UI.Services
@using Chaincase.Common.Services

@inject OverviewViewModel IndexViewModel
@inject UIStateService UiStateService
@inject StackService StackService
@inject NavigationManager NavigationManager
@inject ChaincaseWalletManager WalletManager

@inherits ReactiveComponentBase<OverviewViewModel>

<IonContent>
    <ion-refresher ionRefresh={doRefresh} slot="fixed" pullFactor={0.5} pullMin={100} pullMax={200}>
        <IonRefresherContent></IonRefresherContent>
    </ion-refresher>
    <div class="overview-header">
        <div class="overview-header__balance">
            <IonImg class="ion-padding" style="box-sizing: content-box; margin: 0 auto; padding: 10vw; width: 20vw;"
                    src='@($"_content/Chaincase.UI/img/chaincase-white-theme-mark.svg")' />
            <h1 class="ion-text-center ion-padding">₿ <strong>@ViewModel.Balance</strong></h1>
        </div>
        <div class="ion-padding overview-header__buttons">
            <IonButton @onclick='() => StackPush("/send/who")' class="ion-margin-horizontal" fill="outline">
                <IonIcon slot="start" name="paper-plane" />
                <IonLabel>Send</IonLabel>
            </IonButton>
            <IonButton @onclick='() => StackPush("/receive")' class="ion-margin-horizontal" fill="outline">
                <IonIcon slot="start" name="qr-code" />
                <IonLabel>Receive</IonLabel>
            </IonButton>
        </div>
    </div>
    <IonToast Visible="@(!ViewModel.IsBackedUp)" Buttons="toastButtons" color="danger" message="Don't forget!" />
    <Status />
    <IonList>
        @foreach (var transaction in ViewModel.Transactions)
        {
            <IonItem button OnClick="@(() => OpenTransactionDetail(transaction))">
                @if (!transaction.Confirmed)
                {
                    <IonIcon slot="start"
                             color="medium"
                             name="ellipsis-horizontal-circle-outline" />
                }
                else if (transaction.IsAmountPositive)
                {
                    <IonIcon slot="start"
                             name="add-circle-outline"
                             color="success" />
                }
                else
                {
                    <IonIcon slot="start"
                             name="remove-circle-outline"
                             color="danger" />
                }
                <IonLabel>
                    <h3>@transaction.Label</h3>
                    <h3 class="ion-text-end ion-float-end">@transaction.AmountBtc</h3>
                    <p>@transaction.RelativeDateString()</p>
                </IonLabel>
            </IonItem>
        }
    </IonList>


    @if (!ViewModel.Transactions.Any())
    {
        <p class="ion-text-center">Your transactions will appear here</p>
    }
    <TransactionDetailModal @bind-Visible="IsDetailModalVisible" TransactionViewModel="@CurrentTransactionViewModel" />
</IonContent>

@code{
    public IonToast.IonToastButton[] toastButtons;
    private bool IsToastVisible { get; set; }
    private bool IsDetailModalVisible { get; set; }
    private TransactionViewModel CurrentTransactionViewModel { get; set; }

    protected override void OnInitialized()
    {
        ViewModel = IndexViewModel;

        if (!WalletManager.HasDefaultWalletFile())
            NavigationManager.NavigateTo("landing");

        UiStateService.Title = "Chaincase";

        IsToastVisible = true;
        toastButtons = new[]
        {
            new IonToast.IonToastButton()
            {
                Options = new Dictionary<string, object>()
            {
                    {"text", "BACK UP"},
                },
                Handler = _ =>
                {
                    string backupLocation = ViewModel.HasSeed ? "/backup/start" : "/walletinfo";
                    StackPush(backupLocation);
                    return Task.CompletedTask;
                }
            },
            new IonToast.IonToastButton()
            {
                Options = new Dictionary<string, object>()
            {
                    {"icon", "close"},
                    {"role", "cancel"}
                }
            }
        };
        base.OnInitialized();
    }

    private void StackPush(string uri)
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/overview");
        });
        NavigationManager.NavigateTo(uri);
    }

    private void OpenTransactionDetail(TransactionViewModel transaction)
    {
        CurrentTransactionViewModel = transaction;
        IsDetailModalVisible = true;
    }

    private void DoRefresh() {
        ViewModel.Refresh();
    }
}
