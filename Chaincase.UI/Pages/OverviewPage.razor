@layout TabLayout
@page "/overview"
@using Chaincase.UI.Services
@using Chaincase.Common
@inject OverviewViewModel IndexViewModel
@inject UIStateService UiStateService
@inject StackService StackService
@inject NavigationManager NavigationManager
@inject Global Global

@inherits ReactiveComponentBase<OverviewViewModel>

<IonContent>

    <div class="ion-padding overview-header">
        <IonImg style="box-sizing: content-box; margin: 0 auto; padding: 10vw; width: 20vw;"
                src='@($"_content/Chaincase.UI/img/chaincase-white-theme-mark.svg")' />
        <h1 class="ion-text-center">₿ <strong>@ViewModel.Balance</strong></h1>
        <div class="overview-header__buttons">
            <IonChip>
                <IonIcon name="paper-plane"/>
                <IonLabel>Send</IonLabel>
            </IonChip>
            <IonChip outline color="dark">
                <IonIcon name="qr-code"/>
                <IonLabel>Receive</IonLabel>
            </IonChip>
        </div>
    </div>

    <Status />

    <IonList>
        @foreach (var transaction in ViewModel.Transactions)
        {
            <IonItemSliding>
                <TransactionListItem TransactionViewModel="@transaction" />
                <IonItemOptions side="end">
                    <IonItemOption OnClick="@(() => OpenTransactionDetail(transaction))" color="secondary">Details</IonItemOption>
                </IonItemOptions>
            </IonItemSliding>
        }
    </IonList>


    @if (!ViewModel.Transactions.Any())
    {
        <p class="ion-text-center">Your transactions will appear here</p>
    }
    <TransactionDetailModal @bind-Visible="IsDetailModalVisible" TransactionViewModel="@CurrentTransactionViewModel" />
    <IonToast Visible="@(!ViewModel.IsBackedUp)" Buttons="toastButtons" color="danger" message="Don't forget!" />
</IonContent>

@code{
    public IonToast.IonToastButton[] toastButtons;
    private bool IsToastVisible { get; set; }
    private bool IsDetailModalVisible { get; set; }
    private TransactionViewModel CurrentTransactionViewModel { get; set; }

    protected override void OnInitialized()
    {
        ViewModel = IndexViewModel;

        if (!Global.HasWalletFile())
            NavigationManager.NavigateTo("landing");

        UiStateService.Title = "Chaincase";

        IsToastVisible = true;
        toastButtons = new[]
        {
            new IonToast.IonToastButton()
            {
                Options = new Dictionary<string, object>()
                {
                    {"text", "BACK UP"},
                },
                Handler = _ =>
                {
                    StackPush("/backup/start");
                    return Task.CompletedTask;
                }
            },
            new IonToast.IonToastButton()
            {
                Options = new Dictionary<string, object>()
                {
                    {"icon", "close"},
                    {"role", "cancel"}
                }
            }
        };
        base.OnInitialized();
    }

    private void StackPush(string uri)
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/overview");
        });
        NavigationManager.NavigateTo(uri);
    }

    private void OpenTransactionDetail(TransactionViewModel transaction)
    {
        CurrentTransactionViewModel = transaction;
        IsDetailModalVisible = true;
    }
}
