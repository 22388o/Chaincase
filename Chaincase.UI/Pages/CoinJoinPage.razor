@page "/coinjoin"
@using NBitcoin
@using Chaincase.UI.Services
@using Chaincase.Common
@using Chaincase.Common.Models
@using Chaincase.UI.Components;

@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject StackService StackService
@inject CoinJoinViewModel CoinJoinViewModel
@inject StatusViewModel StatusViewModel

@inherits ReactiveComponentBase<CoinJoinViewModel>

<IonContent>

    @* List Coin Join round info**@
    <IonList>

        <IonListHeader>
            <IonLabel>
                CoinJoin Server Status
            </IonLabel>
        </IonListHeader>
        <IonProgressBar value="@ViewModel.RegisteredPercentage" buffer="@ViewModel.QueuedPercentage" />

        <IonItem>
            <IonLabel>Online</IonLabel>
            <IonBadge>@ViewModel.PeersRegistered</IonBadge>
            <IonLabel slot="end">Queued</IonLabel>
            <IonBadge slot="end" color="dark">@ViewModel.PeersQueued</IonBadge>
        </IonItem>
        <IonItem>
            <IonLabel>Minimum required</IonLabel>
            <IonBadge color="secondary" slot="end">₿ @ViewModel.RequiredBTC</IonBadge>
        </IonItem>

        <IonItem>
            <IonLabel>Auto-join at</IonLabel>
            <IonBadge slot="end">@ViewModel.PeersNeeded peers</IonBadge>
        </IonItem>

        <IonItem>
            <IonLabel>Current phase</IonLabel>
            <IonBadge color="light" slot="end">@ViewModel.RoundPhaseState.Phase</IonBadge>
        </IonItem>
        <IonItem>
            <IonLabel>Phase ends in</IonLabel>
            <IonBadge color="light" slot="end">@($"{ViewModel.TimeLeftTillRoundTimeout:hh\\:mm\\:ss}")</IonBadge>
        </IonItem>
        <IonItem>
            <IonLabel>CoinJoin fee</IonLabel>
            <IonBadge color="light" slot="end">@(ViewModel.CoordinatorFeePercent)% per peer</IonBadge>
        </IonItem>
    </IonList>
    <IonList>
        <IonListHeader>
            <IonLabel>
                My Bitcoin to Join
            </IonLabel>
            @if (IsReady)
            {
                <div class="ion-padding-end">
                <IonChip class="ion-padding-end" color="primary" @onclick="NavigateToSelectCoins">
                    @(HasSelectedCoins ? $"₿ {ViewModel.CoinList?.SelectedAmount}" : "Add +")
                </IonChip>
                </div>
            }
            else
            {
                <div class="ion-padding-end">
                    <IonSpinner/>
                </div> 
            }
        </IonListHeader>
        @foreach (var coin in CoinsToJoin)
        {
            <IonItem button>
                <IonLabel>
                    <h3>₿ @coin.Amount</h3>
                    <p>@coin.Clusters</p>
                    <p><IonBadge color="@StatusToColor(coin.Status)">@(StatusToString(coin.Status))</IonBadge></p>
                </IonLabel>
                <IonNote slot="end" color="@(coin.AnonymitySet > Config.DefaultPrivacyLevelSome ? "success" : "warning")">
                    <ion-anchor @onclick="@(() => OpenCoinDetail(coin))">@coin.AnonymitySet</ion-anchor>
                </IonNote>
            </IonItem>
        }
    </IonList>

    <div>
        <IonModal @bind-Visible="IsPasswordModalVisible">
            <IonHeader>
                <IonToolbar>
                    <IonTitle>Queue to Join</IonTitle>
                    <IonButtons slot="start">
                        <IonButton @onclick="@ToggleModal">Back</IonButton>
                    </IonButtons>
                </IonToolbar>
            </IonHeader>
            <IonContent>
                <IonText class="ion-padding">
                    <h1 class="ion-padding">Authorize Selected Coins to Join</h1>
                </IonText>
                <IonLabel position="stacked" class="ion-padding">Enter Password</IonLabel>
                <IonItem>
                    <IonPasswordInput @bind-Value="Password" placeholder="e.g. margaretthatcheris110%SEXY" />
                </IonItem>
                <IonButton OnClick="@CoinJoin" class="ion-padding neu-button">JOIN NOW</IonButton>
            </IonContent>

        </IonModal>
    </div>

    <IonToast Visible="@IsQueuedToCoinJoin" position="middle" color="warning" message="Chaincase must be open to complete a CoinJoin. We'll notify you when to open back up." />
    <IonToast @bind-Visible="@IsToastVisible" color="@ToastColor" message="@ToastMessage" duration="@ToastDuration" />

    <IonLoading @bind-Visible="@ViewModel.IsEnqueueBusy" message="Coinjoin magic..." />
</IonContent>
<CoinDetailModal @bind-Visible="@IsDetailModalVisible" @bind-CoinViewModel="@CurrentCoinViewModel" />
<IonFooter class="ion-padding">
    @if (IsQueuedToCoinJoin)
    {
        <IonButton class="neu-button" OnClick='@ExitCoinJoin' expand="block">EXIT COINJOIN</IonButton>
    }
    else
    {
        <IonButton class="neu-button" OnClick='@ToggleModal' color="primary" expand="block" disabled="@(!HasSelectedCoins)">COINJOIN</IonButton>
    }
</IonFooter>

@code {
    private bool IsPasswordModalVisible;
    private bool IsToastVisible;
    private string ToastMessage = "";
    private const int ToastDuration = 2000; // ms
    private string ToastColor;

    private string Password = "";
    private bool IsShaking { get; set; }

    private bool IsDetailModalVisible { get; set; }
    private CoinViewModel CurrentCoinViewModel { get; set; }
    private IEnumerable<CoinViewModel> CoinsToJoin => SelectedCoins.Union(JoiningCoins).OrderBy(x => x.IsSelected ? 0 : 1);
    private IEnumerable<CoinViewModel> SelectedCoins => ViewModel.CoinList.CoinList.Where(x => x.IsSelected);
    private IEnumerable<CoinViewModel> JoiningCoins => ViewModel.CoinList.CoinList.Where(x => x.CoinJoinInProgress);


    protected override void OnInitialized()
    {
        ViewModel = CoinJoinViewModel;
        UiStateService.Title = "COINJOIN";
    }

    private void NavigateToSelectCoins()
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/coinjoin");
        });
        NavigationManager.NavigateTo("/selectcoins");
    }

    private async Task ExitCoinJoin()
    {
        await ViewModel.ExitCoinJoinAsync();
    }

    private void OpenCoinDetail(CoinViewModel coin)
    {
        CurrentCoinViewModel = coin;
        IsDetailModalVisible = true;
    }

    private async Task CoinJoin()
    {
        try
        {
            await ViewModel.DoEnqueueAsync(Password);
            ToastMessage = "Success! Queued to join.";
            ToastColor = "success";
            IsToastVisible = true;
            ToggleModal();
        }
        catch (Exception ex)
        {
            ToastMessage = ex.Message;
            ToastColor = "danger";
            IsToastVisible = true;
        }
    }

    private static string StatusToColor(SmartCoinStatus status)
    {
        return status switch
        {
            SmartCoinStatus.Confirmed => "light",
            SmartCoinStatus.Unconfirmed => "light",
            SmartCoinStatus.MixingOnWaitingList => "medium",
            SmartCoinStatus.MixingBanned => "danger",
            SmartCoinStatus.MixingInputRegistration => "primary",
            SmartCoinStatus.MixingConnectionConfirmation => "success",
            SmartCoinStatus.MixingOutputRegistration => "success",
            SmartCoinStatus.MixingSigning => "success",
            SmartCoinStatus.SpentAccordingToBackend => "danger",
            SmartCoinStatus.MixingWaitingForConfirmation => "warning",
            _ => throw new NotSupportedException() // Or rather not implemented?
        };
    }

    private static string StatusToString(SmartCoinStatus status)
    {
        return status switch
        {
            SmartCoinStatus.Confirmed => "",
            SmartCoinStatus.Unconfirmed => "",
            SmartCoinStatus.MixingOnWaitingList => "queued",
            SmartCoinStatus.MixingBanned => "banned",
            SmartCoinStatus.MixingInputRegistration => "registered",
            SmartCoinStatus.MixingConnectionConfirmation => "connection confirmed",
            SmartCoinStatus.MixingOutputRegistration => "output registered",
            SmartCoinStatus.MixingSigning => "signed",
            SmartCoinStatus.SpentAccordingToBackend => "spent",
            SmartCoinStatus.MixingWaitingForConfirmation => "waiting for confirmation",
            _ => ""
        };
    }

    private void ToggleModal() => IsPasswordModalVisible = !IsPasswordModalVisible;

    private bool IsQueuedToCoinJoin => ViewModel.AmountQueued is not null && ViewModel.AmountQueued.CompareTo(Money.Zero) != 0;

    private bool IsReady => StatusViewModel.FiltersLeft == 0 &&
                             StatusViewModel.Backend == WalletWasabi.Models.BackendStatus.Connected &&
                             StatusViewModel.Tor == WalletWasabi.Models.TorStatus.Running;

    private bool HasSelectedCoins => (ViewModel.CoinList?.SelectedAmount ?? Money.Zero) > Money.Zero;

}
