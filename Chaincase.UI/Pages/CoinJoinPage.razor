@page "/coinjoin"
@using Blazor.Ionic
@using NBitcoin
@using WalletWasabi.CoinJoin.Common.Models
@using Chaincase.UI.Services
@using Chaincase.Common
@using Chaincase.Common.Models

@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject StackService StackService
@inject CoinJoinViewModel CoinJoinViewModel
@inject StatusViewModel StatusViewModel

@inherits ReactiveComponentBase<CoinJoinViewModel>

<IonContent>
    @* List Coin Join round info**@
    <IonList>
        <IonListHeader>
            <IonLabel>
                CoinJoin Server Status
            </IonLabel>
        </IonListHeader>

        <IonItem>
            <IonLabel>Registered Peers</IonLabel>
            <IonBadge slot="end" color="primary">@ViewModel.PeersQueued</IonBadge>
        </IonItem>
        <IonItem>
            <IonLabel>Current phase</IonLabel>
            <IonBadge color="light" slot="end">
                @(PhaseToString(ViewModel.RoundPhaseState))
            </IonBadge>
        </IonItem>
        <IonItem>
            <IonLabel>Phase ends in</IonLabel>
            @if (ViewModel.TimeLeftTillRoundTimeout > TimeSpan.Zero ||
             ViewModel.RoundPhaseState.Phase != RoundPhase.InputRegistration)
            {
                <IonBadge color="light" slot="end">@($"{ViewModel.TimeLeftTillRoundTimeout:hh\\:mm\\:ss}")</IonBadge>
            }
            else
            {
                <ion-spinner />
            }
        </IonItem>
        <IonItem>
            <IonLabel>CoinJoin fee</IonLabel>
            <IonBadge color="light" slot="end">@(ViewModel.CoordinatorFeePercent)% per peer</IonBadge>
        </IonItem>
        <IonItem>
            <IonLabel>Minimum required</IonLabel>
            <IonBadge color="secondary" slot="end">‚Çø @ViewModel.RequiredBTC</IonBadge>
        </IonItem>
    </IonList>
    <IonList>
        <IonListHeader>
            <IonLabel>
                Bitcoin to Join
            </IonLabel>
            @if (IsReady)
            {
                <div class="ion-padding-end">
                    <IonChip class="ion-padding-end" color="primary" @onclick='() => NavigateTo($"/coinjoin/selectcoins")'>
                        @(HasSelectedCoins ? $"{SelectedCoinsCount} {(SelectedCoinsCount == 1 ? "coin" : "coins")} ‚Çø {ViewModel.CoinList?.SelectedAmount}" : "Add +")
                    </IonChip>
                </div>
            }
            else
            {
                <div class="ion-padding-end">
                    <IonSpinner />
                </div>
            }
        </IonListHeader>
        @if (!IsReady)
        {
            <IonCard color="light">
                <IonCardContent>
                    <p>Syncing ...</p>
                </IonCardContent>
            </IonCard>
        }
        @foreach (var coin in CoinsToJoin)
        {
            <IonItem button>
                <IonLabel>
                    <h3>‚Çø @coin.Amount</h3>
                    <p>@coin.Clusters</p>
                    <p><IonBadge color="@StatusToColor(coin.Status)">@(StatusToString(coin.Status))</IonBadge></p>
                </IonLabel>
                <IonNote slot="end" color="@(coin.AnonymitySet > Config.DefaultPrivacyLevelSome ? "success" : "warning")">
                    <ion-anchor @onclick="@(() => OpenCoinDetail(coin))">@coin.AnonymitySet</ion-anchor>
                </IonNote>
            </IonItem>
        }
    </IonList>
    <IonToast @bind-Visible="@IsToastVisible" color="@ToastColor" message="@ToastMessage" duration="@ToastDuration" />
</IonContent>
<CoinDetailModal @bind-Visible="@IsDetailModalVisible" @bind-CoinViewModel="@CurrentCoinViewModel" />
<IonFooter>
    <IonCard color="light">
        <IonCardContent>
            @if (ViewModel.IsRegistrationBusy)
            {
                <div class="ion-text-center">
                    <ion-spinner class="ion-padding" /> <p>@(ViewModel.IsEnqueueBusy ? "Authorizing" : "Waiting to register")</p>
                </div>
                <IonButton OnClick="@ExitCoinJoin" class="neu-button">ABORT COINJOIN</IonButton>
            }
            else if (IsQueuedToCoinJoin)
            {
                if (ViewModel.TimeLeftTillRoundTimeout > TimeSpan.FromSeconds(90))
                {
                    <IonCardHeader>Ready to Join ‚ú®</IonCardHeader>
                    <p class="ion-padding">
                        Your bitcoin is registered.<br />
                        We'll notify you when exactly to open the app back up to finish the CoinJoin with your peers.<br />
                    </p>

                }
                else
                {
                    <IonCardHeader class="ion-text-center">
                        DON'T MOVE
                        <br />
                        ‚ú≥Ô∏èüëãüèº‚ú≥Ô∏èüë®üèº‚Äçüíº‚ú≥Ô∏èü§öüèº‚ú≥Ô∏è
                        <br />
                        IT'S HAPPENING
                    </IonCardHeader>
                }
                <IonButton class="neu-button" OnClick='@ExitCoinJoin' expand="block">ABORT COINJOIN</IonButton>
            }
            else if (!ViewModel.HasSelectedEnough || ViewModel.HasTooManyInputs)
            {
                <IonButton class="neu-button" color="primary" expand="block"
                           OnClick='() => NavigateTo($"/coinjoin/selectcoins")' disabled="@(!IsReady)">
                    SELECT BITCOIN
                </IonButton>
            }
            else
            {
                <IonLabel position="stacked" class="ion-padding">Enter Password</IonLabel>
                <IonItem>
                    <IonPasswordInput @bind-Value="Password" />
                </IonItem>
                <IonButton OnClick="@CoinJoin" color="primary" class="neu-button">ENTER COINJOIN</IonButton>
            }
        </IonCardContent>
    </IonCard>
</IonFooter>

@code {
    [Parameter]
    public bool IsAlertVisible { get; set; }

    public IonAlert.IonAlertButton[] buttons;

    private string Password = "";
    private bool IsToastVisible;
    private string ToastMessage = "";
    private const int ToastDuration = 2000; // ms
    private string ToastColor;

    private bool IsDetailModalVisible { get; set; }
    private bool IsAuthorizeModalVisible { get; set; }
    private CoinViewModel CurrentCoinViewModel { get; set; }
    private IEnumerable<CoinViewModel> CoinsToJoin => SelectedCoins?.Union(JoiningCoins)?.OrderBy(x => x.IsSelected ? 0 : 1);
    private IEnumerable<CoinViewModel> SelectedCoins => ViewModel.CoinList?.CoinList.Where(x => x.IsSelected);
    private int SelectedCoinsCount => ViewModel.CoinList?.CoinList.Where(x => x.IsSelected).Count() ?? 0;
    private IEnumerable<CoinViewModel> JoiningCoins => ViewModel.CoinList?.CoinList.Where(x => x.CoinJoinInProgress);


    protected override void OnInitialized()
    {
        ViewModel = CoinJoinViewModel;
        UiStateService.Title = "CoinJoin";

        buttons = new[]
       {
            new IonAlert.IonAlertButton()
            {
                Options = new Dictionary<string, object>()
{
                    {"text", "That's cool"},
                    {"role", "ok"}
                },
                Handler = _ =>
                {
                    return Task.CompletedTask;
                }
            }
        };
    }

    private void NavigateTo(string destination)
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, $"/coinjoin");
            IsAlertVisible = ViewModel.IsQueuedToCoinJoin;
        });
        NavigationManager.NavigateTo(destination);
    }

    private async Task CoinJoin()
    {
        try
        {
            await ViewModel.DoEnqueueAsync(Password);
            Password = "";
        }
        catch (Exception ex)
        {
            ToastMessage = ex.Message;
            ToastColor = "danger";
            IsToastVisible = true;
        }
    }

    private async Task ExitCoinJoin()
    {
        await ViewModel.ExitCoinJoinAsync();
    }

    private void OpenCoinDetail(CoinViewModel coin)
    {
        CurrentCoinViewModel = coin;
        IsDetailModalVisible = true;
    }

    private static string PhaseToString(RoundPhaseState state)
    {
        return state.Phase switch
        {
            RoundPhase.InputRegistration => "1/4: Register Inputs",
            RoundPhase.ConnectionConfirmation => "2/4: Confirm Connections",
            RoundPhase.OutputRegistration => "3/4: Register Outputs",
            RoundPhase.Signing => "4/4: Signing CoinJoin ü™Ñ",
            _ => ""
        };
    }

    private string PhaseHeading(RoundPhaseState state)
    {
        return state.Phase switch
        {
            RoundPhase.InputRegistration => ViewModel.IsRegistered ? "Locked and Loaded ü™Ö" : "Join the Party ü™Ö",
            _ => "It's happening ü™Ñ"
        };
    }


    private static string StatusToColor(SmartCoinStatus status)
    {
        return status switch
        {
            SmartCoinStatus.Confirmed => "light",
            SmartCoinStatus.Unconfirmed => "light",
            SmartCoinStatus.MixingOnWaitingList => "medium",
            SmartCoinStatus.MixingBanned => "danger",
            SmartCoinStatus.MixingInputRegistration => "primary",
            SmartCoinStatus.MixingConnectionConfirmation => "success",
            SmartCoinStatus.MixingOutputRegistration => "success",
            SmartCoinStatus.MixingSigning => "success",
            SmartCoinStatus.SpentAccordingToBackend => "danger",
            SmartCoinStatus.MixingWaitingForConfirmation => "warning",
            _ => throw new NotSupportedException() // Or rather not implemented?
        };
    }

    private static string StatusToString(SmartCoinStatus status)
    {
        return status switch
        {
            SmartCoinStatus.Confirmed => "",
            SmartCoinStatus.Unconfirmed => "",
            SmartCoinStatus.MixingOnWaitingList => "queued",
            SmartCoinStatus.MixingBanned => "banned",
            SmartCoinStatus.MixingInputRegistration => "registered",
            SmartCoinStatus.MixingConnectionConfirmation => "connection confirmed",
            SmartCoinStatus.MixingOutputRegistration => "output registered",
            SmartCoinStatus.MixingSigning => "signed",
            SmartCoinStatus.SpentAccordingToBackend => "spent",
            SmartCoinStatus.MixingWaitingForConfirmation => "waiting for confirmation",
            _ => ""
        };
    }

    private bool IsQueuedToCoinJoin => ViewModel.AmountQueued is not null && ViewModel.AmountQueued.CompareTo(Money.Zero) != 0;

    private bool IsReady => StatusViewModel.FiltersLeft == 0 &&
                             StatusViewModel.Backend == WalletWasabi.Models.BackendStatus.Connected &&
                             StatusViewModel.Tor == WalletWasabi.Models.TorStatus.Running;

    private bool HasSelectedCoins => (ViewModel.CoinList?.SelectedAmount ?? Money.Zero) > Money.Zero;

}
