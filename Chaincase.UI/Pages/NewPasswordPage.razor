@page "/new"
@using Chaincase.Common.Contracts
@using Chaincase.UI.Services
@inject IHsmStorage HsmStorage
@inject NewPasswordViewModel vm
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject StackService StackService

@inherits ReactiveComponentBase<NewPasswordViewModel>

<IonContent class="ion-padding-vertical">
    <EditForm EditContext="_editContext" OnSubmit="SubmitPassword">
        <IonLabel id="setPassword" class="ion-padding">Set Password</IonLabel>
        <IonItem ValidationField="() => Password">
            <IonPasswordInput clear-on-edit="false" @bind-Value="@Password" placeholder="e.g. margaretthatcheris110%SEXY" aria-labelledby="setPassword"/>
        </IonItem>
        <IonValidationMessage ValidationField="() => Password"></IonValidationMessage>
        <IonButton class="neu-button ion-padding-horizontal" color="primary" type="submit" expand="block">NEXT</IonButton>
    </EditForm>
    <IonLoading @bind-Visible="@IsBusy" message="Deriving keys..." />
</IonContent>

@code {

    bool IsBusy;
    bool formInvalid => _editContext.GetValidationMessages().Any();
    bool showPassword;
    string Password;
    EditContext _editContext;
    ValidationMessageStore _validationMessageStore;
    protected override void OnInitialized()
    {
        _editContext = new EditContext(this);

        _validationMessageStore = new ValidationMessageStore(_editContext);
        _editContext.OnValidationRequested += (sender, args) => _validationMessageStore.Clear();
        _editContext.OnFieldChanged += (sender, args) => _validationMessageStore.Clear(args.FieldIdentifier);
        ViewModel = vm;
        UiStateService.Title = "CREATE WALLET";
    }

    private async Task SubmitPassword()
    {
        try
        {
            IsBusy = true;
            await ViewModel.SetPasswordAsync(Password);
            await StackService.ClearStack();
            NavigationManager.NavigateTo("/");
        }
        catch (FormatException e)
        {
            _validationMessageStore.Add(() => Password, e.Message);
            _editContext.NotifyValidationStateChanged();
        }
        finally
        {
            IsBusy = false;
        }
    }
}
