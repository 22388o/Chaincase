@page "/new"
@using Chaincase.Common.Contracts
@using Chaincase.UI.Services
@inject IHsmStorage HsmStorage
@inject NewPasswordViewModel vm
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject StackService StackService

@inherits ReactiveComponentBase<NewPasswordViewModel>

<IonContent class="ion-padding-vertical">
    <EditForm Model="ViewModel" OnValidSubmit="SubmitPassword">
        <DataAnnotationsValidator />
        <IonLabel id="setPassword" class="ion-padding">Set a Password (@NewPasswordViewModel.PasswordMinLength+ Characters) </IonLabel>
        <IonItem ValidationField="() => ViewModel.Password">
            <IonPasswordInput IsNew="true" clear-on-edit="false" @bind-Value="@ViewModel.Password" placeholder="e.g. margaretthatcheris110%SEXY" aria-labelledby="setPassword" />
        </IonItem>
        <div class="ion-padding">
            <IonValidationMessage ValidationField="() => ViewModel.Password" />
        </div>
        <IonCard  class="ion-padding" color="warning">
            <IonCardContent>
                Please record this password in a password manager to keep it safe.
                <strong>If you forget your password it cannot be reset</strong>.
            </IonCardContent>
        </IonCard>
        <IonButton class="neu-button ion-padding-horizontal" color="primary" type="submit" expand="block">NEXT</IonButton>
    </EditForm>
    <IonLoading @bind-Visible="@IsBusy" message="Deriving keys..." />
</IonContent>

@code {
    bool IsBusy;

    protected override void OnInitialized()
    {
        ViewModel = vm;
        UiStateService.Title = "CREATE WALLET";
    }

    private async Task SubmitPassword()
    {
        try
        {
            IsBusy = true;
            await ViewModel.SetPasswordAsync(ViewModel.Password);
            await StackService.ClearStack();
            NavigationManager.NavigateTo("/");
        }
        catch (FormatException e)
        { }
        finally
        {
            IsBusy = false;
        }
    }
}
