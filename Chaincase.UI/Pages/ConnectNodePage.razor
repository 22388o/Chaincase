@page "/connectfullnode"
@using Microsoft.AspNetCore.Components
@using Chaincase.UI.Services
@using System.Net.Sockets
@inject UIStateService UiStateService
@inject StackService StackService
@inject NavigationManager NavigationManager
@inject ConnectNodeViewModel ConnectNodeViewModel
@inherits ReactiveComponentBase<ConnectNodeViewModel>

<IonContent class="ion-padding">
    <div style="display:flex; flex-direction:row; justify-content: space-between; padding:10px;">
        <IonLabel style="font-weight:600;">Connect your full node</IonLabel>
        <IonToggle @onclick="OnToggleConnectNode" color="primary" style="padding-left:15px;" @bind-Value="ConnectNodeIsToggled"/>
    </div>
    <div class="ion-padding">
        <IonLabel style="color:#999999;">
            If you enable this option, Chaincase will allow you to manually connect to your own full node. If you disable, we will find peers to connect to for you.
        </IonLabel>
    </div>
    <div class="ion-padding"> 
        <IonItem>
            <IonInput @bind-Value="ViewModel.NodeAddress" placeholder="Paste or scan address" disabled="@(!ConnectNodeIsToggled)" />
            @if (ViewModel.CanConnect is { })
            {
                <div>
                    <IonBadge color="@(ViewModel.CanConnect ?? false ? "success" : "warning")">
                        @(ViewModel.CanConnect ?? false ? "Connected" : "Disconnected")
                    </IonBadge>
                </div>

            } else {
            <IonIcon @onclick="OnClickScan" size="medium" slot="end" name="qr-code-outline" aria-label="scan" />
            }
        </IonItem>
    </div>
    <div>
        <IonLabel>Default ports: 8332 for mainnet, 18332 for Testnet, 18443 for Regtest</IonLabel>
    </div>
    @if (ViewModel.CanConnect is { })
    {
       
    }
    <div>
        <IonButton @onclick="TrySetNodeAddress" class="neu-button" color="primary" expand="block" disabled="@(!ConnectNodeIsToggled)">
            @if (ViewModel.HasSetCustomAddress) {
            <span>Change</span>
            } else {
        <span>Connect</span>
            }
        </IonButton>
    </div>
    <IonToast @bind-Visible="@IsToastVisible" color="@ToastColor" message="@ToastMessage" duration="@ToastDuration" />
</IonContent>

@code {
    private bool IsToastVisible;
    private string ToastMessage = "";
    private const int ToastDuration = 2000; // ms
    private string ToastColor;
    private bool ConnectNodeIsToggled = false;

    protected override void OnInitialized()
    {
        ViewModel = ConnectNodeViewModel;
        UiStateService.Title = "Bitcoin Core";
        ConnectNodeIsToggled = ViewModel.HasSetCustomAddress;
    }

    private void OnToggleConnectNode() {
        if (!ConnectNodeIsToggled) {
            TrySetDefault();
        }
    }

    private void TrySetDefault() {
        try
        {
            ViewModel.SetDefaultNodeAddress();
            SetSuccessToast("Successfully Reset Default P2P Configs");
        }
        catch (Exception error)
        {
            if (error.Message is { })
            {
                SetErrorToast(error.Message);
            }
            else
            {
                SetErrorToast("Failed To Reset Default P2P Config. Resorting To Fall Back");
            }
        }
    }

    private void TrySetNodeAddress() {
        try
        {
            ViewModel.SetNodeAddress();
            SetSuccessToast("Successfully Set P2P Node Address");
        }
        catch (SocketException e) {
            SetErrorToast(e.Message);
        }
        catch (Exception error)
        {
            if (error.Message is { })
            {
                SetErrorToast(error.Message);
            }
            else
            {
                SetErrorToast("Failed To Set Node Address. Please Check URL Format");
            }
        }
    }

    private void SetSuccessToast(string message) {
        IsToastVisible = true;
        ToastColor = "success";
        ToastMessage = message;
    }

    private void SetErrorToast(string message){
        IsToastVisible = true;
        ToastColor = "danger";
        ToastMessage = message;
    }

    private async Task OnClickScan()
    {
        try
        {
            var scanner = new ZXing.Mobile.MobileBarcodeScanner();
            var result = await scanner.Scan();
            var uri = new Uri(result.Text);
            ViewModel.NodeAddress = uri.ToString();
            TrySetNodeAddress();
        }
        catch (Exception _) {
            SetErrorToast("Failed To Scan QR Code");
        }

    }

}
