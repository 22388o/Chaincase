@page "/send/amount"
@using Chaincase.UI.Services
@inject SendViewModel SendViewModel
@inject StackService StackService
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inherits ReactiveComponentBase<SendViewModel>

<IonContent>

    <IonItem>
        <IonLabel>Amount</IonLabel>
        <IonInput @onkeyup='ViewModel.SetAmountText' Value="ViewModel.AmountText" min="0"/>
    </IonItem>
    <IonItem>
        <IonLabel>Automatic Coin Selection</IonLabel>
        <IonToggle  color="secondary" @bind-Value="IsCoinSelectionAutomatic"/>
    </IonItem>
    <IonItem>
        <IonLabel>Amount Selected</IonLabel>
        <IonButton OnClick="NavigateToSelectCoinsPage" disabled="@(IsCoinSelectionAutomatic)">
            ₿@ViewModel.SelectCoinsViewModel.SelectedAmount
        </IonButton>
    </IonItem>
    <IonItem>
        <IonLabel>Send Max</IonLabel>
        <IonToggle color="secondary" @bind-Value="ViewModel.IsMax" />
    </IonItem>
    <IonItem>
        <IonLabel>Fee</IonLabel>
        <ion-badge @onclick="ToggleSelectFeeModal">@ViewModel.FeeRate</ion-badge>
    </IonItem>

    <IonButton class="ion-padding" OnClick="NavigateToSendApprovalPage" expand="block" disabled="@(!ViewModel.IsTransactionOkToSign)">CONTINUE</IonButton>
</IonContent>

<FeeModal @bind-Visible="@IsFeeModalVisible"
            SendViewModel="@ViewModel"/>

@code {

    private bool IsSelectCoinsModalVisible;
    private bool IsFeeModalVisible;
    private bool _isCoinSelectionAutomatic;
    public bool IsCoinSelectionAutomatic
    {
        get => _isCoinSelectionAutomatic;
        set
        {
            if (value)
            {
                ViewModel.SelectCoinsViewModel.SelectPrivateCoins();
            }
            _isCoinSelectionAutomatic = value;
        }
    }

    private double amount { get; set; }

    protected override void OnInitialized()
    {
        ViewModel = SendViewModel;
        UiStateService.Title = "SEND";
    }

    private void ToggleSelectFeeModal() =>
        IsFeeModalVisible = !IsFeeModalVisible;

    private void NavigateToSelectCoinsPage()
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/send/amount");
        });
        NavigationManager.NavigateTo("selectcoins");
    }

    private void NavigateToSendApprovalPage()
    {
        StackService.PushStackState(async () => {
            await NavigationManager.NavigateBack(null, "/send/amount");
        });
        NavigationManager.NavigateTo("/send/approve");
    }
 }
